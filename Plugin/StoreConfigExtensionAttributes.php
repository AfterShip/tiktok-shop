<?php
/**
 * TikTokShop StoreConfigExtensionAttributes

 *
 * @author    AfterShip <apps@aftership.com>
 * @copyright 2023 AfterShip
 * @license   MIT http://opensource.org/licenses/MIT
 * @link      https://aftership.com
 */

namespace AfterShip\TikTokShop\Plugin;

use Magento\Integration\Api\IntegrationServiceInterface;
use Magento\Authorization\Model\UserContextInterface;
use Magento\Store\Api\Data\StoreConfigInterface;
use Magento\Store\Api\StoreConfigManagerInterface;
use Magento\Store\Api\Data\StoreConfigExtensionFactory;
use AfterShip\TikTokShop\Constants;

/**
 * Display permission & plugin version on store api.
 *
 * @author   AfterShip <apps@aftership.com>
 * @license  MIT http://opensource.org/licenses/MIT
 * @link     https://aftership.com
 */
class StoreConfigExtensionAttributes
{
    /**
     * UserContextInterface
     *
     * @var UserContextInterface
     */
    protected $userContext;
    /**
     * IntegrationServiceInterface
     *
     * @var IntegrationServiceInterface
     */
    protected $integrationService;
    /**
     * Ref to StoreConfigExtensionFactory
     *
     * @var StoreConfigExtensionFactory
     */
    protected $storeConfigExtensionFactory;

    /**
     * Construct
     *
     * @param StoreConfigExtensionFactory $storeConfigExtensionFactory
     * @param UserContextInterface        $userContext
     * @param IntegrationServiceInterface $integrationService
     */
    public function __construct(
        StoreConfigExtensionFactory $storeConfigExtensionFactory,
        UserContextInterface        $userContext,
        IntegrationServiceInterface $integrationService
    ) {

        $this->storeConfigExtensionFactory = $storeConfigExtensionFactory;
        $this->userContext = $userContext;
        $this->integrationService = $integrationService;
    }

    /**
     * GetApiScopes
     *
     * @return string
     */
    public function getApiScopes()
    {
        $integrationId = $this->userContext->getUserId();
        $apiScopes = '';
        if ($integrationId) {
            $scopes = $this->integrationService->getSelectedResources($integrationId);
            $apiScopes = is_array($scopes) ? implode(',', $scopes) : $scopes;
        }
        return $apiScopes;
    }

    /**
     * GetVersion
     *
     * @return string
     */
    public function getVersion()
    {
        return Constants::AFTERSHIP_TIKTOK_SHOP_VERSION;
    }

    /**
     * AfterGetStoreConfigs.
     *
     * @param StoreConfigManagerInterface $subject
     * @param array $result
     *
     * @return mixed
     */
    public function afterGetStoreConfigs(StoreConfigManagerInterface $subject, $result)
    {
        foreach ($result as $store) {
            $extensionAttributes = $store->getExtensionAttributes();
            if (!$extensionAttributes) {
                $extensionAttributes = $this->storeConfigExtensionFactory->create();
            }
            // setPermissions method is generated by extension_attributes.xml.
            if (method_exists($extensionAttributes, 'setPermissions')) {
                call_user_func_array([$extensionAttributes, 'setPermissions'], [$this->getApiScopes()]);
            }
            if (method_exists($extensionAttributes, 'setAftershipTiktok')) {
                call_user_func_array([$extensionAttributes, 'setAftershipTiktok'], [$this->getVersion()]);
            }
            // Pass Upgrade compatibility tool check.
            if (method_exists($extensionAttributes, 'setData')) {
                call_user_func_array([$extensionAttributes, 'setData'], ['permissions', $this->getApiScopes()]);
                call_user_func_array([$extensionAttributes, 'setData'], ['aftership_tiktok', $this->getVersion()]);
            }
            $store->setExtensionAttributes($extensionAttributes);
        }
        return $result;
    }
}
